/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package app;

import java.awt.Frame;
import java.awt.HeadlessException;

import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author nishom
 */
public class SPK extends javax.swing.JFrame {
    int AltID;
    Alternatif alternatif;
    Kriteria kriteria;
    int KrtID;


    /**
     * Creates new form SPK
     */
    public SPK() {
        initComponents();

        setLocationRelativeTo(null);
        setExtendedState(Frame.MAXIMIZED_BOTH);

        loadAlternatif("");
        loadKriteria("");
        loadFasilitas();
        loadLokasi();
        loadKeamanan();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        btnEditAlternatif = new app.ButtonTrans();
        btnTambahAlternatif = new app.ButtonTrans();
        btnHapusAlternatif = new app.ButtonTrans();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelAlternatif = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        btnEditKriteria = new app.ButtonTrans();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelKriteria = new javax.swing.JTable();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTableFasilitas = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTableLokasi = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTableKeamanan = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        btnUrut = new app.ButtonTrans();
        buttonTrans4 = new app.ButtonTrans();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabelSPK = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 153, 51));

        jLabel2.setBackground(new java.awt.Color(0, 153, 255));
        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("SISTEM PENDUKUNG KEPUTUSAN REKOMENDASI TEMPAT KOS");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(338, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 755, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(287, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(43, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel2.setPreferredSize(new java.awt.Dimension(748, 50));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1368, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel6.setPreferredSize(new java.awt.Dimension(748, 50));

        btnEditAlternatif.setText("Edit Alternatif");
        btnEditAlternatif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditAlternatifActionPerformed(evt);
            }
        });

        btnTambahAlternatif.setText("+ Alternatif");
        btnTambahAlternatif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahAlternatifActionPerformed(evt);
            }
        });

        btnHapusAlternatif.setText("Hapus");
        btnHapusAlternatif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusAlternatifActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(148, 148, 148)
                .addComponent(btnEditAlternatif, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnHapusAlternatif, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(974, Short.MAX_VALUE))
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel6Layout.createSequentialGroup()
                    .addGap(16, 16, 16)
                    .addComponent(btnTambahAlternatif, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(1244, Short.MAX_VALUE)))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditAlternatif, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addComponent(btnHapusAlternatif, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel6Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(btnTambahAlternatif, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        jPanel3.add(jPanel6, java.awt.BorderLayout.PAGE_START);

        tabelAlternatif.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabelAlternatif.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelAlternatifMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelAlternatif);

        jPanel3.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Alternatif", jPanel3);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel7.setPreferredSize(new java.awt.Dimension(748, 50));

        btnEditKriteria.setText("Edit Kriteria");
        btnEditKriteria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditKriteriaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(btnEditKriteria, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(1236, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnEditKriteria, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel4.add(jPanel7, java.awt.BorderLayout.PAGE_START);

        tabelKriteria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabelKriteria.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelKriteriaMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tabelKriteria);

        jPanel4.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Kriteria", jPanel4);

        jPanel9.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel10.setPreferredSize(new java.awt.Dimension(748, 50));

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1380, Short.MAX_VALUE)
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        jPanel9.add(jPanel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1380, -1));

        jTableFasilitas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(jTableFasilitas);

        jPanel9.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 270, 140));

        jTableLokasi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(jTableLokasi);

        jPanel9.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, 1320, 160));

        jTableKeamanan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane7.setViewportView(jTableKeamanan);

        jPanel9.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 70, 970, 140));

        jLabel3.setText("LOKASI");
        jPanel9.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 260, -1, -1));

        jLabel4.setText("KEAMANAN");
        jPanel9.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 50, -1, -1));

        jLabel5.setText("FASILITAS");
        jPanel9.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 50, -1, -1));

        jTabbedPane1.addTab("Sub Kriteria", jPanel9);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel8.setPreferredSize(new java.awt.Dimension(748, 50));

        btnUrut.setText("Urutkan");
        btnUrut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUrutActionPerformed(evt);
            }
        });

        buttonTrans4.setText("Lakukan Proses SAW");
        buttonTrans4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonTrans4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(1177, Short.MAX_VALUE)
                .addComponent(btnUrut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65))
            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel8Layout.createSequentialGroup()
                    .addGap(16, 16, 16)
                    .addComponent(buttonTrans4, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(1146, Short.MAX_VALUE)))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addComponent(btnUrut, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel8Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(buttonTrans4, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        jPanel5.add(jPanel8, java.awt.BorderLayout.PAGE_START);

        tabelSPK.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tabelSPK);

        jPanel5.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Perhitungan SPK", jPanel5);

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnUrutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUrutActionPerformed
        // TODO add your handling code here:
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(tabelSPK.getModel());
        tabelSPK.setRowSorter(sorter);
        List<RowSorter.SortKey> sortKeys = new ArrayList<>();

        int columnIndexToSort = 2;
        sortKeys.add(new RowSorter.SortKey(columnIndexToSort, SortOrder.DESCENDING));

        sorter.setSortKeys(sortKeys);
        sorter.sort();
    }//GEN-LAST:event_btnUrutActionPerformed

    private void btnTambahAlternatifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahAlternatifActionPerformed
        // TODO add your handling code here:
        TambahAlternatif TA = new TambahAlternatif(this, true);
        TA.setVisible(true);
    }//GEN-LAST:event_btnTambahAlternatifActionPerformed

    private void tabelAlternatifMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelAlternatifMouseClicked
        // TODO add your handling code here:
        int index = tabelAlternatif.getSelectedRow();
        if(index != -1){
            String id = tabelAlternatif.getValueAt(index, 0).toString();
            int TheID = Integer.parseInt(id);
            AltID = TheID;
            
            String nama = tabelAlternatif.getValueAt(index, 1).toString();
            String alamat = tabelAlternatif.getValueAt(index, 2).toString();
            String harga = tabelAlternatif.getValueAt(index, 3).toString();
            String luas = tabelAlternatif.getValueAt(index, 4).toString();
            String jenis = tabelAlternatif.getValueAt(index, 5).toString();
            String fasilitas = tabelAlternatif.getValueAt(index, 6).toString();
            String lokasi = tabelAlternatif.getValueAt(index, 7).toString();
            String keamanan = tabelAlternatif.getValueAt(index, 8).toString();
            String keterangan = tabelAlternatif.getValueAt(index, 9).toString();
            alternatif = new Alternatif();
            alternatif.setId(id);
            alternatif.setNama_kos(nama); 
            alternatif.setAlamat(alamat); 
            alternatif.setHarga_sewa(harga); 
            alternatif.setLuas_kamar(luas); 
            alternatif.setJenis_kos(jenis); 
            alternatif.setFasilitas(fasilitas); 
            alternatif.setLokasi(lokasi); 
            alternatif.setKeamanan(keamanan); 
            alternatif.setKeterangan(keterangan); 
        }
            
    }//GEN-LAST:event_tabelAlternatifMouseClicked

    private void btnEditAlternatifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditAlternatifActionPerformed
        // TODO add your handling code here:
        EditData();
    }//GEN-LAST:event_btnEditAlternatifActionPerformed

    private void btnHapusAlternatifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusAlternatifActionPerformed
        // TODO add your handling code here:
        HapusData();
    }//GEN-LAST:event_btnHapusAlternatifActionPerformed

    private void btnEditKriteriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditKriteriaActionPerformed
        // TODO add your handling code here:
        EditKriteria();
    }//GEN-LAST:event_btnEditKriteriaActionPerformed

    private void tabelKriteriaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelKriteriaMouseClicked
        // TODO add your handling code here:
        int index = tabelKriteria.getSelectedRow();
        if(index != -1){
            String id = tabelKriteria.getValueAt(index, 0).toString();
            int TheID = Integer.parseInt(id);
            KrtID = TheID;
            String namaKrit = tabelKriteria.getValueAt(index, 1).toString();
            String bobot = tabelKriteria.getValueAt(index, 2).toString();
            String label = tabelKriteria.getValueAt(index, 3).toString();
            kriteria = new Kriteria();
            kriteria.setId(id);
            kriteria.setNama_kriteria(namaKrit); 
            kriteria.setBobot(bobot); 
            kriteria.setLabel(label);
        }
    }//GEN-LAST:event_tabelKriteriaMouseClicked

    private void buttonTrans4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonTrans4ActionPerformed
        // TODO add your handling code here:
        SPK();
    }//GEN-LAST:event_buttonTrans4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SPK.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SPK.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SPK.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SPK.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SPK().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private app.ButtonTrans btnEditAlternatif;
    private app.ButtonTrans btnEditKriteria;
    private app.ButtonTrans btnHapusAlternatif;
    private app.ButtonTrans btnTambahAlternatif;
    private app.ButtonTrans btnUrut;
    private app.ButtonTrans buttonTrans4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableFasilitas;
    private javax.swing.JTable jTableKeamanan;
    private javax.swing.JTable jTableLokasi;
    public static javax.swing.JTable tabelAlternatif;
    public static javax.swing.JTable tabelKriteria;
    private javax.swing.JTable tabelSPK;
    // End of variables declaration//GEN-END:variables

    public static void loadAlternatif(String where) {
        try {
            //design tabel
            Object[][] baris = null;
            Object[] header = {"ID", "ALTERNATIF","ALAMAT", "HARGA SEWA", "LUAS KAMAR", "JENIS KOS", "FASILITAS", "LOKASI", "KEAMANAN","KETERANGAN"};
            DefaultTableModel model = new DefaultTableModel(baris, header);
            tabelAlternatif.setModel(model);

            //read data from db
            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            String query = "SELECT * FROM data_kos";
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                int id = rs.getInt("id_kos");
                String alternatif = rs.getString("nama_kos");
                String alamat = rs.getString("alamat");
                String harga = rs.getString("harga_sewa");
                String luas = rs.getString("luas_kamar");
                String jenis = rs.getString("jenis_kos");
                String fasilitas = rs.getString("fasilitas");
                String lokasi = rs.getString("lokasi");
                String keamanan = rs.getString("keamanan");
                String keterangan = rs.getString("keterangan");
                Object[] data = {id, alternatif, alamat, harga, luas, jenis, fasilitas, lokasi, keamanan,keterangan};
                model.addRow(data);
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    public static void loadKriteria(String where) {
        try {
            //design tabel
            Object[][] baris = null;
            Object[] header = {"ID", "KRITERIA", "BOBOT", "LABEL"};
            DefaultTableModel model = new DefaultTableModel(baris, header);
            tabelKriteria.setModel(model);

            //read data from db
            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            String query = "SELECT * FROM kriteria";
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                int id = rs.getInt("id");
                String kriteria = rs.getString("nama_kriteria");
                String bobot = rs.getString("bobot");
                String label = rs.getString("label");

                Object[] data = {id, kriteria, bobot, label};
                model.addRow(data);
            }

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }
    
    private void loadFasilitas() {
        try {
            //design tabel
            Object[][] baris = null;
            Object[] header = {"ID", "FASILITAS", "BOBOT"};
            DefaultTableModel model = new DefaultTableModel(baris, header);
            jTableFasilitas.setModel(model);

            //read data from db
            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            String query = "SELECT * FROM fasilitas";
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                int id = rs.getInt("id_fasilitas");
                String fasilitas = rs.getString("fasilitas");
                int bobot = rs.getInt("id_fasilitas");

                Object[] data = {id, fasilitas, bobot};
                model.addRow(data);
            }

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }
    

    private void loadLokasi() {
        try {
            //design tabel
            Object[][] baris = null;
            Object[] header = {"ID", "LOKASI", "BOBOT"};
            DefaultTableModel model = new DefaultTableModel(baris, header);
            jTableLokasi.setModel(model);

            //read data from db
            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            String query = "SELECT * FROM lokasi";
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                int id = rs.getInt("id_lokasi");
                String lokasi = rs.getString("lokasi");
                int bobot = rs.getInt("id_lokasi");

                Object[] data = {id, lokasi, bobot};
                model.addRow(data);
            }

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

    }

    private void loadKeamanan() {
        try {
            //design tabel
            Object[][] baris = null;
            Object[] header = {"ID", "KEAMANAN", "BOBOT"};
            DefaultTableModel model = new DefaultTableModel(baris, header);
            jTableKeamanan.setModel(model);

            //read data from db
            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            String query = "SELECT * FROM keamanan";
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                int id = rs.getInt("id_keamanan");
                String keamanan = rs.getString("keamanan");
                int bobot = rs.getInt("id_keamanan");

                Object[] data = {id, keamanan, bobot};
                model.addRow(data);
            }

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    private void SPK() {
        try {
            Object[] header = {"NO","ALTERNATIF","BOBOT"};
            Object[][] data = null;
            DefaultTableModel model = new DefaultTableModel(data, header);
            tabelSPK.setModel(model); 
            int nomor = 0;
            
            //
            List<Double> L_hasil = new ArrayList();
            
            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            String q = "SELECT * FROM data_kos";
            ResultSet rs = st.executeQuery(q);
            while (rs.next()) {
                int id = rs.getInt("id_kos");
                String alternatif = rs.getString("nama_kos");

                double harga = rs.getDouble("harga_sewa");
                double luas_kamar = rs.getDouble("luas_kamar");
                double fasilitas = rs.getDouble("fasilitas");
                double lokasi = rs.getDouble("lokasi");
                double keamanan = rs.getDouble("keamanan");

                double pem_harga = label("harga_sewa").equals("cost") ? MIN("harga_sewa") : MAX("harga_sewa");
                double pem_luas = label("luas_kamar").equals("cost") ? MIN("luas_kamar") : MAX("luas_kamar");
                double pem_fasilitas = label("fasilitas").equals("cost") ? MIN("fasilitas") : MAX("fasilitas");
                double pem_lokasi = label("lokasi").equals("cost") ? MIN("lokasi") : MAX("lokasi");
                double pem_keamanan = label("keamanan").equals("cost") ? MIN("keamanan") : MAX("keamanan");
                
                double norm_harga = label("harga_sewa").equals("cost") ? MIN("harga_sewa")/harga : harga/MAX("harga_sewa");
                double norm_luas = label("luas_kamar").equals("cost") ? MIN("luas_kamar")/luas_kamar : luas_kamar/MAX("luas_kamar");
                double norm_fasilitas = label("fasilitas").equals("cost") ? MIN("fasilitas")/fasilitas : fasilitas/MAX("fasilitas");
                double norm_lokasi = label("lokasi").equals("cost") ? MIN("lokasi")/lokasi : lokasi/MAX("lokasi");
                double norm_keamanan = label("keamanan").equals("cost") ? MIN("keamanan")/keamanan : keamanan/MAX("keamanan");
                
                double hasil = (bobot("harga_sewa")*norm_harga)+(bobot("luas_kamar")*norm_luas)+(bobot("fasilitas")*norm_fasilitas)+(bobot("lokasi")*norm_lokasi)+(bobot("keamanan")*norm_keamanan);
                L_hasil.add(hasil);
                nomor++;
                Object[] rowData = {nomor,alternatif,hasil};
                model.addRow(rowData);                 
            }
            double bobotTerbaik = Collections.max(L_hasil);
            jLabel1.setText("Bobot terbaik: "+bobotTerbaik); 
            
        } catch (Exception e) {
        }
    }

    private double MIN(String kriteria) {
        double min = 0;
        try {
            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            String q = "SELECT MIN(" + kriteria + ") AS min_kriteria FROM data_kos";
            ResultSet rs = st.executeQuery(q);
            while (rs.next()) {
                min = rs.getDouble("min_kriteria");
            }
            return min;

        } catch (Exception e) {
        }
        return min;
    }

    private double MAX(String kriteria) {
        double max = 0;
        try {
            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            String q = "SELECT MAX(" + kriteria + ") AS max_kriteria FROM data_kos";
            ResultSet rs = st.executeQuery(q);
            while (rs.next()) {
                max = rs.getDouble("max_kriteria");
            }
            return max;

        } catch (Exception e) {
        }
        return max;
    }

    private String label(String kriteria) {
        String label = "cost";
        try {
            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            String q = "SELECT label FROM kriteria WHERE nama_kriteria='" + kriteria + "'";
            ResultSet rs = st.executeQuery(q);
            while (rs.next()) {
                label = rs.getString("label");
            }
            return label;
        } catch (Exception e) {
        }

        return label;
    }
    
    private double bobot(String kriteria) {
        double bobot = 0;
        try {
            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            String q = "SELECT bobot FROM kriteria WHERE nama_kriteria='" + kriteria + "'";
            ResultSet rs = st.executeQuery(q);
            while (rs.next()) {
                bobot = rs.getDouble("bobot");
            }
            return bobot;
        } catch (Exception e) {
        }

        return bobot;
    }
    
    private void EditData() {
        if(AltID > 0){
            EditAlternatif edit = new EditAlternatif(this, true);
            edit.alt = alternatif;
            edit.setVisible(true); 
        }else {
            JOptionPane.showMessageDialog(this, "Anda belum memilih Data"); 
        }
    }

    private void HapusData() {
        if(AltID > 0){
            try {
                Object[] tombol = {"YA", "Tidak"};
                int option = JOptionPane.showOptionDialog(this, 
                        "Apakah anda ingin menghapus data?", 
                        "Konfirmasi", 
                        JOptionPane.YES_NO_OPTION, 
                        JOptionPane.INFORMATION_MESSAGE, null, tombol, 0);
                if(option == 0){
                    //YA
                    //YES
                    Connection c = Koneksi.konekKeDB();
                    Statement st = c.createStatement();
                    String sql = "DELETE FROM data_kos WHERE id_kos='"+AltID+"'";
                    //eksekusi query
                    st.executeUpdate(sql);
                    //refresh view table
                    loadAlternatif(""); 
                    JOptionPane.showMessageDialog(this, "Data telah dihapus");
                }                
            } catch (HeadlessException | SQLException e) {
            }
        }else {
            JOptionPane.showMessageDialog(this, "Anda belum memilih Data"); 
        }
    }

    private void EditKriteria() {
        if(KrtID > 0){
            EditKriteria edit = new EditKriteria(this, true);
            edit.krt = kriteria;
            edit.setVisible(true); 
        }else {
            JOptionPane.showMessageDialog(this, "Anda belum memilih Data"); 
        }
    }

    
}
